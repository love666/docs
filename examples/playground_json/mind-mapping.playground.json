{"files":{"htmlCard.js":{"content":"const nodeStyle = {\n  'centerTheme': 'center-theme',\n  'branchTheme': 'branch-theme',\n  'childTheme': 'child-theme',\n};\n\nclass HtmlCard extends HtmlNode {\n  // 重写HtmlNode的setHtml，来控制html节点内容。\n  setHtml(rootEl) {\n    const { properties } = this.props.model;\n    let leftDirectChild = 0; // 直接左子节点\n    let rightDirectChild = 0; // 直接右子节点\n    if (properties.children) {\n      properties.children.forEach((node) => {\n        if (node.side === 'left') {\n          leftDirectChild++;\n        } else {\n          rightDirectChild++;\n        }\n      });\n    }\n    const html= `\n      ${properties.leftFold ? `\n      <div class=\"staff-nodenum\" onclick=\"expandChildNode('${properties.id}', 'left')\">\n        ${properties.leftChildNodeNum}\n      </div>\n      ` : `\n      <div class=\"staff-options\">\n        <div>\n          ${(properties.side === 'left' || !properties.side) ? `\n          ${leftDirectChild ? `\n            <div class=\"node-delete\" onclick=\"foldChildNode('${properties.id}', 'left')\">\n              <img src=\"https://img-hxy021.didistatic.com/static/starimg/img/DyFI0DgXJb1669537739785.png\" alt=\"\"  width=\"20px\" height=\"20px\" />\n            </div>\n          ` : ''}\n          <div class=\"node-add\" onclick=\"addChildNode('${properties.id}', '${properties.properties.type}', 'left')\">\n            <img src=\"https://img-hxy021.didistatic.com/static/starimg/img/4YJ5oVGRhF1669467073849.png\" alt=\"\"  width=\"20px\" height=\"20px\" />\n          </div>\n          ` : ''}\n        </div>\n      </div>\n      `}\n      <div class=\"${nodeStyle[properties.type]}\">\n      </div>\n      ${properties.rightFold ? `\n      <div class=\"staff-nodenum\" onclick=\"expandChildNode('${properties.id}', 'right')\">\n        ${properties.rightChildNodeNum}\n      </div>\n      ` : `\n      <div class=\"staff-options\">\n        <div>\n          ${(properties.side === 'right' || !properties.side) ? `\n          ${rightDirectChild ? `\n            <div class=\"node-delete\" onclick=\"foldChildNode('${properties.id}', 'right')\">\n              <img src=\"https://img-hxy021.didistatic.com/static/starimg/img/DyFI0DgXJb1669537739785.png\" alt=\"\"  width=\"20px\" height=\"20px\" />\n            </div>\n          ` : ''}\n          <div class=\"node-add\" onclick=\"addChildNode('${properties.id}', '${properties.properties.type}', 'right')\">\n            <img src=\"https://img-hxy021.didistatic.com/static/starimg/img/4YJ5oVGRhF1669467073849.png\" alt=\"\"  width=\"20px\" height=\"20px\" />\n          </div>\n          ` : ''}\n        </div>\n      </div>\n      `}\n    `;\n    const el = document.createElement('div');\n    el.className = 'mind-mapping-node';\n    el.innerHTML = html;\n    rootEl.innerHTML = '';\n    rootEl.appendChild(el);\n    window.addChildNode = (id, type, side) => {\n      const { graphModel } = this.props;\n      graphModel.eventCenter.emit(\"custom:node-add\", {\n        id,\n        type,\n        side,\n      });\n    };\n    window.foldChildNode = (id, side) => {\n      const { graphModel } = this.props;\n      graphModel.eventCenter.emit(\"custom:node-fold\", { id, side });\n    };\n    window.expandChildNode = (id, side) => {\n      const { graphModel } = this.props;\n      graphModel.eventCenter.emit(\"custom:node-expand\", { id, side });\n    };\n  }\n}\n\nclass HtmlCardModel extends HtmlNodeModel {\n  initNodeData(data) {\n    if (data.properties.type === 'childTheme' && (!data.text || typeof data.text === 'string')) {\n      data.text = {\n        value: data.text || \"\",\n        x: data.x,\n        y: data.y - 15,\n      };\n    }\n    super.initNodeData(data);\n    switch (this.properties.type) {\n      case 'centerTheme':\n        this.width = 200;\n        this.height = 60;\n        // 中心主题不能删除\n        this.menu = [];\n        break;\n      case 'branchTheme':\n        this.width = 200;\n        this.height = 50;\n        break;\n      case 'childTheme':\n        this.width = 200;\n        this.height = 50;\n        break;\n      default:\n        break;\n    }\n  }\n\n  getDefaultAnchor() {\n    const { width, height, x, y, id } = this;\n    return [\n      {\n        x: x - width / 2 + 40,\n        y,\n        name: 'left',\n        id: `${id}_0`\n      },\n      {\n        x: x + width / 2 - 40,\n        y,\n        name: 'right',\n        id: `${id}_1`,\n        edgeAddable: false\n      },\n    ]\n  }\n\n  getTextStyle() {\n    const style = super.getTextStyle();\n    switch (this.properties.type) {\n      case 'centerTheme':\n        style.color = 'white';\n        style.fontSize = 16;\n        break;\n      case 'branchTheme':\n        style.fontSize = 14;\n        break;\n      case 'childTheme':\n        style.fontSize = 12;\n        break;\n      default:\n        break;\n    }\n    return style;\n  }\n}\n\nexport default {\n  type: 'mindmap-node',\n  view: HtmlCard,\n  model: HtmlCardModel,\n}"},"htmlEdge.js":{"content":"class Model extends BezierEdgeModel {\n  initEdgeData(data) {\n    super.initEdgeData(data);\n  }\n\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    style.stroke = '#0074d9';\n    style.strokeWidth = 2;\n    return style;\n  }\n}\n\nexport default {\n  type: 'mindmap-edge',\n  view: BezierEdge,\n  model: Model,\n};\n\n"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/core/dist/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/extension@1.1.31/lib/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    #container {\n      height: calc(100% - 20px);\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <script src=\"//unpkg.com/@logicflow/core/dist/logic-flow.js\"></script>\n  <script src=\"//unpkg.com/@logicflow/extension@1.1.31/lib/Menu.js\"></script>\n  <script src=\"//unpkg.com/@antv/hierarchy@0.6.8/build/hierarchy.js\"></script>\n  <script type=\"module\" src=\"./index.js\"></script>\n</body>\n</html>"},"index.js":{"content":"import miniMapNode from \"./htmlCard.js\";\nimport miniMapEdge from './htmlEdge.js';\n\n// logicflow流程图配置\nconst LFConfig = {\n  edgeTextDraggable: false,\n  adjustEdgeMiddle: true,\n  hoverOutline: false,\n  nodeSelectedOutline: false,\n  adjustNodePosition: false,\n  hideAnchors: true,\n  background: {\n    backgroundImage:\n            \"url('https://dpubstatic.udache.com/static/dpubimg/805efa14-d908-4332-a7a2-bee8fbb903e3.jpg')\",\n    backgroundRepeat: 'repeat',\n  },\n  grid: {\n    size: 1,\n    visible: false,\n  },\n  style: {\n    edgeText: {\n      background: {\n        fill: '#F7F7F7',\n      },\n      hoverBackground: {\n        fill: '#F7F7F7',\n      },\n    },\n  },\n};\n\n// 引入菜单插件\nLogicFlow.use(Menu);\n\nconst container = document.querySelector('#container');\nconst lf = new LogicFlow({\n  ...LFConfig,\n  // 容器\n  container,\n  // 指定画布区域的宽高，默认使用容器宽高\n  width: 1000,\n  height: 1000,\n});\n\nlf.register(miniMapNode);\nlf.register(miniMapEdge);\n\nlf.extension.menu.setMenuConfig({\n  nodeMenu: [\n    {\n      text: '删除',\n      callback(node) {\n        deleteNode(baseData, node.properties.id);\n        renderData(baseData);\n      },\n    },\n  ], // 覆盖默认的节点右键菜单\n  edgeMenu: false, // 删除默认的边右键菜单\n  graphMenu: [],  // 覆盖默认的画布右键菜单，与false表现一样\n});\n\nlf.setTheme({ \n  arrow: {\n    offset: 0, // 箭头垂线长度\n    verticalLength: 0, // 箭头底线长度\n  }\n});\n\nlet enterNode = null;\n\n// 鼠标移入节点显示按钮\nlf.on('node:mouseenter', ({e}) => {\n  enterNode = e.target;\n  for (let index = 0; index < e.target.children.length; index++) {\n    const element = e.target.children[index];\n    if (element.className === 'staff-options') {\n      element.style.visibility = 'visible';\n    }\n  }\n});\n\n// 鼠标离开节点隐藏按钮\nlf.on('node:mouseleave', (e) => {\n  for (let index = 0; index < enterNode.children.length; index++) {\n    const element = enterNode.children[index];\n    if (element.className === 'staff-options') {\n      element.style.visibility = 'hidden';\n    }\n  }\n});\n\n// 初始节点数据\nconst baseData =  {\n  id: '1',\n  type: 'html-card',\n  properties: {\n    type: 'centerTheme',\n    leftFold: false,\n    rightFold: false,\n  },\n  text: '中心主题',\n  children: [\n    {\n      side: 'right',\n      id: '2',\n      type: 'html-card',\n      properties: {\n        type: 'branchTheme',\n        rightFold: false,\n      },\n      text: '分支主题1',\n      children: [\n        {\n          side: 'right',\n          id: '4',\n          type: 'html-card',\n          properties: {\n            type: 'childTheme',\n            rightFold: false,\n          },\n          text: '子主题1',\n        },\n        {\n          side: 'right',\n          id: '5',\n          type: 'html-card',\n          properties: {\n            type: 'childTheme',\n            rightFold: false,\n          },\n          text: '子主题2',\n        }\n      ]\n    },\n    {\n      side: 'right',\n      id: '3',\n      type: 'html-card',\n      properties: {\n        type: 'branchTheme',\n        rightFold: false,\n      },\n      text: '分支主题2',\n    }\n  ]\n};\n\n// 分支主题编号\nlet branchThemeOrder = 2;\n// 子主题编号\nlet childTheme = 2;\n\n// 注册节点添加事件\nlf.on('custom:node-add', ({id, type, side}) => {\n  addChildNode(baseData, id, type, side, baseData);\n  renderData(baseData);\n});\n\n// 注册节点折叠事件\nlf.on('custom:node-fold', ({id, side}) => {\n  foldChildNode(baseData, id, side);\n  renderData(baseData);\n});\n\n// 注册节点展开事件\nlf.on('custom:node-expand', ({id, side}) => {\n  expandChildNode(baseData, id, side);\n  renderData(baseData);\n});\n\n/**\n * 为指定的节点添加子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n * @param {String} type 当前节点类型\n * @param {String} side 当前节点方向\n * @param {Object} soriginBaseDatade 初始节点数据\n */\nconst addChildNode = (baseData, id, type, side, originBaseData) => {\n  if (baseData.id === id) {\n    baseData.children = baseData.children ? [\n      ...baseData.children,\n      {\n        side,\n        id: `${Math.round(Math.random() * 10000)}`,\n        type: 'html-card',\n        properties: {\n          type: childType[type],\n        },\n        text: `${type === 'centerTheme' ? `分支主题${branchThemeOrder += 1}` :\n         `子主题${childTheme += 1}`}`,\n      }\n    ] : [\n      {\n        side,\n        id: `${Math.round(Math.random() * 10000)}`,\n        type: 'html-card',\n        properties: {\n          type: childType[type],\n        },\n        text: `${type === 'centerTheme' ? `分支主题${branchThemeOrder += 1}` :\n         `子主题${childTheme += 1}`}`,\n      }\n    ];\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      addChildNode(node, id, type, side, baseData);\n    });\n  }\n};\n\n// 当前节点的子节点类型\nconst childType = {\n  'centerTheme': 'branchTheme',\n  'branchTheme': 'childTheme',\n  'childTheme': 'childTheme',\n}\n\n/**\n * 删除指定的节点及其子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n * @param {Object} parent 当前节点父节点\n * @param {Number} nodeIndex 当前节点索引\n */\nconst deleteNode = (baseData, id, parent, nodeIndex) => {\n  if (baseData.id === id) {\n    if (!parent) {\n      alert('根节点不能删除');\n      return;\n    }\n    parent.children.splice(nodeIndex, 1);\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node, index) => {\n      deleteNode(node, id, baseData, index);\n    });\n  }\n};\n\n/**\n * 折叠指定节点的子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n * @param {String} side 折叠方向\n */\nconst foldChildNode = (baseData, id, side) => {\n  if (baseData.id === id) {\n    if (side === 'left') {\n      baseData.properties.leftFold = true;\n      baseData.properties.leftChildNodeNum = getChildNodeNum(baseData, id, side);\n    } else {\n      baseData.properties.rightFold = true;\n      baseData.properties.rightChildNodeNum = getChildNodeNum(baseData, id, side);\n    }\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      foldChildNode(node, id, side);\n    });\n  }\n}\n\n// 递归获取当前节点孩子节点数量\nconst getChildNodeNum = (baseData, id, side) => {\n  let nodeNum = 0;\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      if (node.side === side) {\n        nodeNum += getChildNodeNum(node, id, side) + 1;\n      }\n    });\n  }\n  return nodeNum;\n}\n\n/**\n * 展开指定节点的子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n * @param {String} side 折叠方向\n */\nconst expandChildNode = (baseData, id, side) => {\n  if (baseData.id === id) {\n    if (side === 'left') {\n      baseData.properties.leftFold = false;\n    } else {\n      baseData.properties.rightFold = false;\n    }\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      expandChildNode(node, id, side);\n    });\n  }\n};\n\n// 节点平移\nconst moveX = 400;\nconst moveY = 300;\n\n// 图数据渲染\nconst renderData = (baseData) => {\n  // baseData中折叠的子节点不参与渲染\n  const exclueFoldNodes = (data) => {\n    const newChildren = [];\n    if (data.children) {\n      data.children.forEach((item) => {\n        // 左侧节点且未折叠\n        if (item.side === 'left' && !data.properties.leftFold) {\n          const newItem = exclueFoldNodes(item);\n          newChildren.push(newItem);\n        }\n        // 右侧节点且未折叠\n        if (item.side === 'right' && !data.properties.rightFold) {\n          const newItem = exclueFoldNodes(item);\n          newChildren.push(newItem);\n        }\n      });\n    }\n    return {\n      ...data,\n      children: newChildren,\n    };\n  };\n  // 节点布局\n  const miniMapData = window.Hierarchy.mindmap(exclueFoldNodes(baseData), {\n    getSide(d) {\n      return d.data.side || 'right';\n    },\n    direction: 'H',\n    getHGap() {\n      return 130;\n    },\n    getVGap() {\n      return 20;\n    },\n  });\n\n  // 将布局后的数据转换成LogicFlow所需的图数据\n  const tansferNodes = (node, parent) => {\n    const nodes = [];\n    const edges = [];\n    const curNode = {\n      id: `node_${node.data.id}`,\n      x: node.x + moveX,\n      y: node.y + moveY,\n      type: 'mindmap-node',\n      properties: {\n        ...node.data,\n        ...node.data.properties,\n      },\n      text: node.data.text,\n    };\n    nodes.push(curNode);\n    if (parent) {\n      edges.push({\n        id: `edge_${node.data.id}_${parent.properties.id}`,\n        sourceNodeId: parent.id,\n        targetNodeId: curNode.id,\n        type: 'mindmap-edge',\n      });\n    }\n    if (node.children && node.children.length) {\n      node.children.forEach((childNode) => {\n        const graphData = tansferNodes(childNode, curNode);\n        nodes.push(...graphData.nodes);\n        edges.push(...graphData.edges);\n      });\n    }\n    return {\n      nodes,\n      edges,\n    };\n  };\n\n  const graphData = tansferNodes(miniMapData);\n  // 渲染\n  lf.render(graphData);\n}\n\nrenderData(baseData);"},"style.css":{"content":".mind-mapping-node {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.center-theme {\n  height: 40px;\n  flex: 1;\n  margin: 0 5px;\n  border: 2px solid #0074d9;\n  background-color: #0074d9;\n  border-radius: 6px;\n}\n\n.branch-theme {\n  height: 30px;\n  flex: 1;\n  margin: 0 5px;\n  border: 2px solid #0074d9;\n  background-color: #EFF4FF;\n  border-radius: 6px;\n}\n\n.child-theme {\n  height: 30px;\n  flex: 1;\n  margin: 0 5px;\n  border-bottom: 4px solid #0074d9;\n  position: relative;\n  top: -15px;\n}\n\n.node-add {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n}\n\n.node-delete {\n  width: 20px;\n  height: 20px;\n  margin-bottom: 5px;\n  cursor: pointer;\n}\n\n.staff-options {\n  height: 40px;\n  width: 20px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  visibility: hidden;\n}\n\n.staff-nodenum {\n  height: 15px;\n  width: 15px;\n  background-color: #b0d0ec;\n  font-size: 12px;\n  color: #0074d9;\n  border: 1px solid #0074d9;\n  border-radius: 15px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}\n"}}}