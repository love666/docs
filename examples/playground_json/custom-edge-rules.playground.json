{"files":{"customNode.js":{"content":"\nclass SquareModel extends RectNodeModel {\n  initNodeData(data) {\n    super.initNodeData(data);\n    // 设置校验规则方法1\n    const circleOnlyAsTarget = {\n      message: \"矩形节点下一个节点只能是圆形或多边形节点\",\n      validate: (sourceNode, targetNode, sourceAnchor, targetAnchor) => {\n        return targetNode.type === \"customCircleNode\" || targetNode.type === \"customPolygonNode\";\n      },\n    };\n    this.sourceRules.push(circleOnlyAsTarget);\n  }\n\n  // 设置校验规则方法2\n  // getConnectedSourceRules() {\n  //   const rules = super.getConnectedSourceRules();\n  //   const geteWayOnlyAsTarget = {\n  //     message: \"下一个节点只能是circle\",\n  //     validate: (sourceNode, targetNode, sourceAnchor, targetAnchor) => {\n  //       return targetNode.type === \"circle\";\n  //     }\n  //   };\n  //   rules.push(geteWayOnlyAsTarget);\n  //   return rules;\n  // }\n\n  getNodeStyle() {\n    const style = super.getNodeStyle();\n    // 如果此节点不允许被连接，节点变红\n    if (this.state === 5) {\n      style.fill = \"red\";\n    }\n    if (this.state === 4) {\n      style.fill = \"green\";\n    }\n    return style;\n  }\n}\n\n\nclass CircleModel extends CircleNodeModel {\n  getNodeStyle() {\n    const style = super.getNodeStyle();\n    // 如果此节点不允许被连接，节点变红\n    if (this.state === 5) {\n      style.fill = \"red\";\n    }\n    if (this.state === 4) {\n      style.fill = \"green\";\n    }\n    return style;\n  }\n}\n\nclass EllipseModel extends EllipseNodeModel {\n  getNodeStyle() {\n    const style = super.getNodeStyle();\n    // 如果此节点不允许被连接，节点变红\n    if (this.state === 5) {\n      style.fill = \"red\";\n    }\n    if (this.state === 4) {\n      style.fill = \"green\";\n    }\n    return style;\n  }\n}\n\nclass PolygonModel extends PolygonNodeModel {\n  getNodeStyle() {\n    const style = super.getNodeStyle();\n    // 如果此节点不允许被连接，节点变红\n    if (this.state === 5) {\n      style.fill = \"red\";\n    }\n    if (this.state === 4) {\n      style.fill = \"green\";\n    }\n    return style;\n  }\n}\n\nexport const customRectNode = {\n  type: \"customRectNode\",\n  model: SquareModel,\n  view: RectNode\n};\n\nexport const customCircleNode = {\n  type: \"customCircleNode\",\n  model: CircleModel,\n  view: CircleNode\n};\n\nexport const customEllipseNode = {\n  type: \"customEllipseNode\",\n  model: EllipseModel,\n  view: EllipseNode\n};\n\nexport const customPolygonNode = {\n  type: \"customPolygonNode\",\n  model: PolygonModel,\n  view: PolygonNode\n};"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/core/dist/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    #container {\n      height: calc(100% - 20px);\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <script src=\"//unpkg.com/@logicflow/core/dist/logic-flow.js\"></script>\n  <script type=\"module\" src=\"./index.js\"></script>\n</body>\n</html>"},"index.js":{"content":"import { customRectNode, customCircleNode, customEllipseNode, customPolygonNode} from \"./customNode.js\";\n\n// logicflow流程图配置\nconst LFConfig = {\n  background: {\n    backgroundImage:\n            \"url('https://dpubstatic.udache.com/static/dpubimg/805efa14-d908-4332-a7a2-bee8fbb903e3.jpg')\",\n    backgroundRepeat: 'repeat',\n  },\n  grid: {\n    size: 1,\n    visible: false,\n  },\n  keyboard: {\n    enabled: true,\n  },\n};\nconst container = document.querySelector('#container');\n\nconst lf = new LogicFlow({\n  ...LFConfig,\n  // 容器\n  container,\n  // 指定画布区域的宽高，默认使用容器宽高\n  width: 1000,\n  height: 1000,\n  // 默认边\n  edgeType: 'polyline',\n});\n\nlf.batchRegister([customRectNode, customCircleNode, customEllipseNode, customPolygonNode]);\n\n// 连接规则校验失败事件\nlf.on('connection:not-allowed', ({msg}) => {\n  alert(msg);\n});\n\nconst nodeData = [\n  {\n    id: \"1\",\n    type: \"customRectNode\",\n    x: 200,\n    y: 250,\n    text: \"矩形\"\n  },\n  {\n    id: \"2\",\n    type: \"customCircleNode\",\n    x: 400,\n    y: 100,\n    text: \"圆形\"\n  },\n  {\n    id: \"3\",\n    type: \"customEllipseNode\",\n    x: 400,\n    y: 250,\n    text: \"椭圆\"\n  },\n  {\n    id: \"4\",\n    type: \"customPolygonNode\",\n    x: 400,\n    y: 400,\n    text: \"多边形\"\n  },\n];\n\nlf.render({\n  nodes: nodeData,\n});"}}}