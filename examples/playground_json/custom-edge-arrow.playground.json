{"files":{"customEdge.js":{"content":"class Connection extends PolylineEdge {\n  getEndArrow() {\n    const { model, graphModel } = this.props;\n    const { id, properties: { arrowType } } = model;\n    const { stroke, strokeWidth } = this.getArrowStyle();\n    const pathAttr = {\n      stroke,\n      strokeWidth\n    }\n    if (arrowType === 'empty') {  // 空心箭头\n      return h('path', {\n        ...pathAttr,\n        fill: '#FFF',\n        d: 'M -10 0  -20 -5 -30 0 -20 5 z'\n      })\n    } else if (arrowType === 'half') { // 半箭头\n      return (\n        h('path', {\n          ...pathAttr,\n          d: 'M 0 0 -10 5'\n        })\n      )\n    }\n    return h('path', {\n      ...pathAttr,\n      d: 'M 0 0 -10 -5 -10 5 z'\n    })\n  }\n}\n\nexport default {\n  type: 'custom-polyline-edge',\n  view: Connection,\n  model: PolylineEdgeModel,\n}"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/core/dist/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    #container {\n      height: calc(100% - 20px);\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <div class=\"custom-node-style\">\n    <div class=\"custom-node-fill\">\n      箭头类型：\n      <input type=\"radio\" name=\"type\" value=\"default\" checked=\"checked\" oninput=\"handleTypeChange(this)\">默认箭头\n      <input type=\"radio\" name=\"type\" value=\"empty\" oninput=\"handleTypeChange(this)\">空心箭头\n      <input type=\"radio\" name=\"type\" value=\"half\" oninput=\"handleTypeChange(this)\">半箭头\n    </div>\n  </div>\n  <script src=\"//unpkg.com/@logicflow/core/dist/logic-flow.js\"></script>\n  <script type=\"module\" src=\"./index.js\"></script>\n</body>\n</html>"},"index.js":{"content":"import customPolyline from \"./customEdge.js\";\n\n// logicflow流程图配置\nconst LFConfig = {\n  background: {\n    backgroundImage:\n            \"url('https://dpubstatic.udache.com/static/dpubimg/805efa14-d908-4332-a7a2-bee8fbb903e3.jpg')\",\n    backgroundRepeat: 'repeat',\n  },\n  grid: {\n    size: 1,\n    visible: false,\n  },\n  keyboard: {\n    enabled: true,\n  },\n};\nconst container = document.querySelector('#container');\n\nconst lf = new LogicFlow({\n  ...LFConfig,\n  // 容器\n  container,\n  // 指定画布区域的宽高，默认使用容器宽高\n  width: 1000,\n  height: 1000,\n});\n\nlf.register(customPolyline);\n\nconst nodeData = [\n  {\n    id: \"node_id_1\",\n    type: \"circle\",\n    x: 100,\n    y: 100,\n    text: { x: 100, y: 100, value: \"节点1\" }\n  },\n  {\n    id: \"node_id_2\",\n    type: \"circle\",\n    x: 200,\n    y: 300,\n    text: { x: 200, y: 300, value: \"节点2\" },\n    properties: {}\n  }\n];\n\nconst edgeData = [\n  {\n    id: \"edge_id\",\n    type: \"custom-polyline-edge\",\n    sourceNodeId: \"node_id_1\",\n    targetNodeId: \"node_id_2\",\n    text: { x: 139, y: 200, value: \"连线\" },\n    startPoint: { x: 100, y: 140 },\n    endPoint: { x: 200, y: 250 },\n    pointsList: [\n      { x: 100, y: 140 },\n      { x: 100, y: 200 },\n      { x: 200, y: 200 },\n      { x: 200, y: 250 }\n    ],\n    properties: {\n      arrowType: 'default',\n    }\n  }\n];\n\nconst render = (nodes, edges) => {\n  lf.render({\n    nodes,\n    edges,\n  });\n}\nrender(nodeData, edgeData);\n\nwindow.handleTypeChange = (el) => {\n  edgeData[0].properties = {\n    ...edgeData[0].properties,\n    arrowType: el.value,\n  };\n  render(nodeData, edgeData);\n}"},"style.css":{"content":".custom-node-style {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 300px;\n  font-size: 14px;\n  margin: 20px;\n}\n\n.custom-node-style > div {\n  margin-bottom: 10px;\n}\n\n.custom-node-fill {\n  display: flex;\n}"}}}