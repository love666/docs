{"files":{"htmlCard.js":{"content":"class HtmlCard extends HtmlNode {\n  // 重写HtmlNode的setHtml，来控制html节点内容。\n  setHtml(rootEl) {\n    const { properties } = this.props.model;\n    const html= `\n      ${\n        properties.gender === 'male' ? \n        '<img src=\"https://img-hxy021.didistatic.com/static/starimg/img/7GdwliYTKp1669532392610.png\" alt=\"\"  width=\"60px\" height=\"60px\" />' :\n        '<img src=\"https://img-hxy021.didistatic.com/static/starimg/img/6tKEIAgA2k1669532400487.png\" alt=\"\"  width=\"60px\" height=\"60px\" />'\n      }\n      <div class=\"staff-detail\">\n        <div class=\"staff-name\">${properties.name}</div>\n        <div class=\"staff-position\">${properties.position}</div>\n        <div class=\"staff-department\">${properties.department}</div>\n      </div>\n      ${\n        properties.isFold ? `\n        <div class=\"staff-nodenum\" onclick=\"updateNode('${properties.id}', 'expand')\">\n          ${properties.childNodeNum}\n        </div>\n        ` : `\n        <div class=\"staff-options\">\n          <div class=\"node-delete\" onclick=\"updateNode('${properties.id}', 'fold')\">\n            <img src=\"https://img-hxy021.didistatic.com/static/starimg/img/DyFI0DgXJb1669537739785.png\" alt=\"\"  width=\"20px\" height=\"20px\" />\n          </div>\n          <div class=\"node-add\" onclick=\"updateNode('${properties.id}', 'add')\">\n            <img src=\"https://img-hxy021.didistatic.com/static/starimg/img/4YJ5oVGRhF1669467073849.png\" alt=\"\"  width=\"20px\" height=\"20px\" />\n          </div>\n        </div>\n        `\n      }\n    `;\n    const el = document.createElement('div');\n    el.className = 'mind-mapping-node';\n    el.innerHTML = html;\n    rootEl.innerHTML = '';\n    rootEl.appendChild(el);\n    window.updateNode = (id, type) => {\n      const { graphModel } = this.props;\n      graphModel.eventCenter.emit(\"custom:node-update\", {\n        id,\n        type,\n      });\n    };\n  }\n}\n\nclass HtmlCardModel extends HtmlNodeModel {\n  initNodeData(data) {\n    super.initNodeData(data);\n    this.width = 250;\n    this.height = 80;\n  }\n\n  getDefaultAnchor() {\n    const { width, height, x, y, id } = this;\n    return [\n      {\n        x,\n        y: y - height / 2 + 11,\n        name: 'top',\n        id: `${id}_0`\n      },\n      {\n        x,\n        y: y + height / 2 - 11,\n        name: 'bottom',\n        id: `${id}_1`,\n        edgeAddable: false\n      },\n    ]\n  }\n}\n\nexport default {\n  type: 'organization-node',\n  view: HtmlCard,\n  model: HtmlCardModel,\n}"},"htmlEdge.js":{"content":"class Model extends PolylineEdgeModel {\n  initEdgeData(data) {\n    super.initEdgeData(data);\n  }\n\n  setAttributes() {\n    const { startPoint, endPoint } = this;\n    const midY = (startPoint.y + endPoint.y) / 2;\n    const point1 = {\n      x: startPoint.x,\n      y: midY,\n    };\n    const point2 = {\n      x: endPoint.x,\n      y: midY,\n    };\n    this.pointsList = [{...startPoint}, point1, point2, {...endPoint}];\n    this.points = this.pointsList.map((point) => {\n      return `${point.x},${point.y}`;\n    }).join(' ');\n  }\n\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    style.stroke = '#0074d9';\n    style.strokeWidth = 2;\n    return style;\n  }\n}\n\nexport default {\n  type: 'organization-edge',\n  view: PolylineEdge,\n  model: Model,\n};\n\n"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/core/dist/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/extension@1.1.31/lib/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    #container {\n      height: calc(100% - 20px);\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <script src=\"//unpkg.com/@logicflow/core/dist/logic-flow.js\"></script>\n  <script src=\"//unpkg.com/@logicflow/extension@1.1.31/lib/Menu.js\"></script>\n  <script src=\"//unpkg.com/@antv/hierarchy@0.6.8/build/hierarchy.js\"></script>\n  <script type=\"module\" src=\"./index.js\"></script>\n</body>\n</html>"},"index.js":{"content":"import organizationNode from \"./htmlCard.js\";\nimport organizationEdge from './htmlEdge.js';\n\n// logicflow流程图配置\nconst LFConfig = {\n  edgeTextDraggable: false,\n  adjustEdgeMiddle: true,\n  hoverOutline: false,\n  nodeSelectedOutline: false,\n  adjustNodePosition: false,\n  hideAnchors: true,\n  nodeTextEdit: false,\n  background: {\n    backgroundImage:\n            \"url('https://dpubstatic.udache.com/static/dpubimg/805efa14-d908-4332-a7a2-bee8fbb903e3.jpg')\",\n    backgroundRepeat: 'repeat',\n  },\n  grid: {\n    size: 1,\n    visible: false,\n  },\n  style: {\n    edgeText: {\n      background: {\n        fill: '#F7F7F7',\n      },\n      hoverBackground: {\n        fill: '#F7F7F7',\n      },\n    },\n  },\n};\n\n// 引入菜单插件\nLogicFlow.use(Menu);\n\nconst container = document.querySelector('#container');\n\nconst lf = new LogicFlow({\n  ...LFConfig,\n  // 容器\n  container,\n  // 指定画布区域的宽高，默认使用容器宽高\n  width: 1000,\n  height: 1000,\n});\n\nlf.register(organizationNode);\nlf.register(organizationEdge);\n\nlf.extension.menu.setMenuConfig({\n  nodeMenu: [\n    {\n      text: '删除',\n      callback(node) {\n        deleteNode(baseData, node.properties.id);\n        renderData(baseData);\n      },\n    },\n  ], // 覆盖默认的节点右键菜单\n  edgeMenu: false, // 删除默认的边右键菜单\n  graphMenu: [],  // 覆盖默认的画布右键菜单，与false表现一样\n});\n\nlf.setTheme({ \n  arrow: {\n    offset: 0, // 箭头垂线长度\n    verticalLength: 0, // 箭头底线长度\n  }\n});\n\nlet enterNode = null;\n\n// 鼠标移入节点显示按钮\nlf.on('node:mouseenter', ({e}) => {\n  enterNode = e.target;\n  for (let index = 0; index < e.target.children.length; index++) {\n    const element = e.target.children[index];\n    if (element.className === 'staff-options') {\n      element.style.visibility = 'visible';\n    }\n  }\n});\n\n// 鼠标离开节点隐藏按钮\nlf.on('node:mouseleave', (e) => {\n  for (let index = 0; index < enterNode.children.length; index++) {\n    const element = enterNode.children[index];\n    if (element.className === 'staff-options') {\n      element.style.visibility = 'hidden';\n    }\n  }\n});\n\n// 初始节点数据\nconst baseData =  {\n  id: '1',\n  x: 100,\n  y: 100,\n  type: 'html-card',\n  isFold: false,\n  gender: 'male',\n  name: 'Employee 1',\n  position: 'position',\n  department: 'department',\n  children: [\n    {\n      id: '2',\n      type: 'html-card',\n      isFold: false,\n      gender: 'female',\n      name: 'Employee 2',\n      position: 'position',\n      department: 'department',\n      children: [\n        {\n          id: '4',\n          type: 'html-card',\n          isFold: false,\n          gender: 'male',\n          name: 'Employee 4',\n          position: 'position',\n          department: 'department',\n        },\n        {\n          id: '5',\n          type: 'html-card',\n          isFold: false,\n          gender: 'female',\n          name: 'Employee 5',\n          position: 'position',\n          department: 'department',\n        }\n      ]\n    },\n    {\n      id: '3',\n      type: 'html-card',\n      isFold: false,\n      gender: 'male',\n      name: 'Employee 3',\n      position: 'position',\n      department: 'department',\n      children: [\n        {\n          id: '6',\n          type: 'html-card',\n          isFold: false,\n          gender: 'male',\n          name: 'Employee 6',\n          position: 'position',\n          department: 'department',\n        },\n      ],\n    }\n  ]\n};\n\n// 注册节点添加/折叠/展开事件\nlf.on('custom:node-update', ({id, type}) => {\n  switch (type) {\n    case 'add':\n      addChildNode(baseData, id);\n      break;\n    case 'fold':\n      foldChildNode(baseData, id);\n      break;\n    case 'expand':\n      expandChildNode(baseData, id);\n      break;\n    default:\n      break;\n  }\n  renderData(baseData);\n});\n\n/**\n * 添加指定节点的子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n */\nconst addChildNode = (baseData, id) => {\n  if (baseData.id === id) {\n    baseData.children = baseData.children ? [\n      ...baseData.children,\n      {\n        id: `${Math.round(Math.random() * 10000)}`,\n        type: 'html-card',\n        isFold: false,\n        gender: Math.round(Math.random() * 10) % 2 === 0 ? 'male' : 'female',\n        name: 'New Employee',\n        position: 'position',\n        department: 'department',\n      }\n    ] : [\n      {\n        id: `${lf.graphModel.nodes.length + 1}`,\n        type: 'html-card',\n        isFold: false,\n        gender: Math.round(Math.random() * 10) % 2 === 0 ? 'male' : 'female',\n        name: 'New Employee',\n        position: 'position',\n        department: 'department'\n      }\n    ];\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      addChildNode(node, id);\n    });\n  }\n};\n\n/**\n * 折叠指定节点的子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n */\nconst foldChildNode = (baseData, id) => {\n  if (baseData.id === id) {\n    baseData.isFold = true;\n    baseData.childNodeNum = getChildNodeNum(baseData, id);\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      foldChildNode(node, id);\n    });\n  }\n}\n\n// 递归获取当前节点孩子节点数量\nconst getChildNodeNum = (baseData, id) => {\n  let nodeNum = 0;\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      nodeNum += getChildNodeNum(node, id) + 1;\n    });\n  }\n  return nodeNum;\n}\n\n/**\n * 展开指定节点的子节点\n * @param {Object} baseData 节点数据\n * @param {String} id 当前节点ID\n */\nconst expandChildNode = (baseData, id) => {\n  if (baseData.id === id) {\n    baseData.isFold = false;\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node) => {\n      expandChildNode(node, id);\n    });\n  }\n};\n\nconst deleteNode = (baseData, id, parent, nodeIndex) => {\n  if (baseData.id === id) {\n    if (!parent) {\n      alert('根节点不能删除');\n      return;\n    }\n    parent.children.splice(nodeIndex, 1);\n    return;\n  }\n  if (baseData.children && baseData.children.length) {\n    baseData.children.forEach((node, index) => {\n      deleteNode(node, id, baseData, index);\n    });\n  }\n};\n\n// 节点平移\nconst moveX = 600;\nconst moveY = 200;\n\nconst renderData = (baseData) => {\n  // baseData中折叠的子节点不参与渲染\n  const exclueFoldNodes = (data) => {\n    const newChildren = [];\n    if (data.children) {\n      data.children.forEach((item) => {\n        // 节点且未折叠\n        if (!data.isFold) {\n          const newItem = exclueFoldNodes(item);\n          newChildren.push(newItem);\n        }\n      });\n    }\n    return {\n      ...data,\n      children: newChildren,\n    };\n  };\n  const rootNode = window.Hierarchy.compactBox(exclueFoldNodes(baseData), {\n    direction: 'TB',\n    getId(d) {\n      return d.id;\n    },\n    getHGap() {\n      return 120;\n    },\n    getVGap() {\n      return 40;\n    },\n  });\n\n  const tansferNodes = (node, parent) => {\n    const nodes = [];\n    const edges = [];\n    const curNode = {\n      id: `node_${node.data.id}`,\n      x: node.x + moveX,\n      y: node.y + moveY,\n      type: 'organization-node',\n      properties: {\n        ...node.data,\n      },\n    };\n    nodes.push(curNode);\n    if (parent) {\n      edges.push({\n        id: `edge_${node.data.id}_${parent.properties.id}`,\n        sourceNodeId: parent.id,\n        targetNodeId: curNode.id,\n        type: 'organization-edge',\n      });\n    }\n    if (node.children && node.children.length) {\n      node.children.forEach((childNode) => {\n        const graphData = tansferNodes(childNode, curNode);\n        nodes.push(...graphData.nodes);\n        edges.push(...graphData.edges);\n      });\n    }\n    return {\n      nodes,\n      edges,\n    };\n  };\n\n  const graphData = tansferNodes(rootNode);\n  lf.render(graphData);\n}\n\nrenderData(baseData);\n"},"style.css":{"content":".mind-mapping-node {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.staff-detail {\n  padding-right: 15px;\n  border: 2px solid #0074d9;\n  border-left: 0;\n  border-radius: 5px;\n  width: 160px;\n  text-align: right;\n  position: relative;\n  left: -25px;\n}\n\n.staff-name {\n  font-size: 14px;\n  font-weight: 900;\n  color: #03569f;\n}\n\n.staff-position {\n  font-size: 12px;\n  color: #6a7279;\n}\n\n.staff-department {\n  font-size: 12px;\n  color: #6a7279;\n}\n\n.staff-options {\n  flex: 1;\n  position: relative;\n  left: -25px;\n  align-self: flex-end;\n  margin-bottom: 12px;\n  visibility: hidden;\n}\n\n.node-delete {\n  width: 20px;\n  height: 20px;\n  margin-bottom: 5px;\n  cursor: pointer;\n}\n\n.node-add {\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n}\n\n.staff-nodenum {\n  height: 15px;\n  width: 15px;\n  position: relative;\n  left: -23px;\n  top: 14px;\n  background-color: #b0d0ec;\n  font-size: 12px;\n  color: #0074d9;\n  border: 1px solid #0074d9;\n  border-radius: 15px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n}"}}}