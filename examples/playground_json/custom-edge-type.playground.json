{"files":{"customEdge.js":{"content":"class CustomLineModel extends LineEdgeModel {\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    style.stroke = 'red';\n    style.strokeWidth = 4;\n    style.strokeDasharray = '3 3';\n    return style;\n  }\n}\n\nclass CustomPolylineModel extends PolylineEdgeModel {\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    style.stroke = 'green';\n    style.strokeWidth = 4;\n    style.strokeDasharray = '3 3';\n    return style;\n  }\n}\n\nclass CustomBezierModel extends BezierEdgeModel {\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    style.stroke = 'blue';\n    style.strokeWidth = 4;\n    style.strokeDasharray = '3 3';\n    return style;\n  }\n}\n\nexport const customLine = {\n  type: 'custom-line-edge',\n  view: LineEdge,\n  model: CustomLineModel,\n}\n\nexport const customPolyline = {\n  type: 'custom-polyline-edge',\n  view: PolylineEdge,\n  model: CustomPolylineModel,\n}\n\nexport const customBezier = {\n  type: 'custom-bezier-edge',\n  view: BezierEdge,\n  model: CustomBezierModel,\n}"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/core/dist/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    #container {\n      height: calc(100% - 20px);\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <script src=\"//unpkg.com/@logicflow/core/dist/logic-flow.js\"></script>\n  <script type=\"module\" src=\"./index.js\"></script>\n</body>\n</html>"},"index.js":{"content":"import { customLine, customPolyline, customBezier } from \"./customEdge.js\";\n\n// logicflow流程图配置\nconst LFConfig = {\n  background: {\n    backgroundImage:\n            \"url('https://dpubstatic.udache.com/static/dpubimg/805efa14-d908-4332-a7a2-bee8fbb903e3.jpg')\",\n    backgroundRepeat: 'repeat',\n  },\n  grid: {\n    size: 1,\n    visible: false,\n  },\n  keyboard: {\n    enabled: true,\n  },\n};\nconst container = document.querySelector('#container');\n\nconst lf = new LogicFlow({\n  ...LFConfig,\n  // 容器\n  container,\n  // 指定画布区域的宽高，默认使用容器宽高\n  width: 1000,\n  height: 1000,\n  // 默认边\n  edgeType: 'bezier',\n  // 自定义节点之间边的类型\n  // 移动已有边时会有 currentEdge 信息, 否则为空\n  edgeGenerator: (sourceNode, targetNode, currentEdge) => {\n    // 起始节点类型 rect 时使用 自定义的边 custom-line-edge\n    if (sourceNode.type === 'rect') return 'line';\n    if (sourceNode.type === 'circle') return 'polyline';\n    if (sourceNode.type === 'ellipse') return 'custom-line-edge';\n    if (sourceNode.type === 'polygon') return 'custom-polyline-edge';\n    if (sourceNode.type === 'diamond') return 'custom-bezier-edge';\n    if (sourceNode.type === 'circle' && targetNode === 'diamond') return 'custom-line-edge';\n    if (sourceNode.type === 'ellipse' && targetNode === 'rect') return 'custom-line-edge';\n  }\n});\n\nlf.register(customLine);\nlf.register(customPolyline);\nlf.register(customBezier);\n\nconst nodeData = [\n  {\n    id: \"1\",\n    type: \"rect\",\n    x: 100,\n    y: 100,\n    text: \"矩形\"\n  },\n  {\n    id: \"2\",\n    type: \"circle\",\n    x: 300,\n    y: 100,\n    text: \"圆形\"\n  },\n  {\n    id: \"3\",\n    type: \"ellipse\",\n    x: 500,\n    y: 100,\n    text: \"椭圆\"\n  },\n  {\n    id: \"4\",\n    type: \"polygon\",\n    x: 100,\n    y: 250,\n    text: \"多边形\"\n  },\n  {\n    id: \"5\",\n    type: \"diamond\",\n    x: 300,\n    y: 250,\n    text: \"菱形\"\n  },\n];\n\nlf.render({\n  nodes: nodeData,\n});"}}}