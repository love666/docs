{"files":{"customEdge.js":{"content":"const textMove = (model) => {\n  const { properties } = model;\n  const { textHorizontalMove = 0, textVerticalMove = 0 } = properties;\n  model.text = {\n    ...model.text,\n    x: model.text.x + textHorizontalMove,\n    y: model.text.y + textVerticalMove,\n  }\n  model.isAnimation = properties.isAnimation;\n}\n\nconst changeEdgeStyle = (model, style) => {\n  const { properties } = model;\n  style.stroke = properties.strokeColor || style.stroke;\n  style.strokeWidth = properties.strokeWidth || style.strokeWidth;\n  return style;\n}\n\nconst changeTextStyle = (model, style) => {\n  const { properties } = model;\n  style.color = properties.textColor || style.color;\n  style.fontSize = properties.fontSize || style.fontSize;\n  return style;\n}\n\nconst changeAnimationStyle = (style) => {\n  style.strokeDasharray = \"5 5\";\n  style.animationDuration = \"10s\";\n  return style;\n}\n\nclass CustomLineModel extends LineEdgeModel {\n\n  setAttributes() {\n    textMove(this);\n  }\n\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    return changeEdgeStyle(this, style);\n  }\n\n  getTextStyle() {\n    const style = super.getTextStyle();\n    return changeTextStyle(this, style);\n  }\n\n  getEdgeAnimationStyle() {\n    const style = super.getEdgeAnimationStyle();\n    return changeAnimationStyle(style);\n  }\n}\n\nclass CustomBezierModel extends BezierEdgeModel {\n\n  setAttributes() {\n    textMove(this);\n  }\n\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    return changeEdgeStyle(this, style);\n  }\n\n  getTextStyle() {\n    const style = super.getTextStyle();\n    return changeTextStyle(this, style);\n  }\n\n  getEdgeAnimationStyle() {\n    const style = super.getEdgeAnimationStyle();\n    return changeAnimationStyle(style);\n  }\n}\n\nclass CustomPolylineModel extends PolylineEdgeModel {\n\n  setAttributes() {\n    textMove(this);\n  }\n\n  getEdgeStyle() {\n    const style = super.getEdgeStyle();\n    return changeEdgeStyle(this, style);\n  }\n\n  getTextStyle() {\n    const style = super.getTextStyle();\n    return changeTextStyle(this, style);\n  }\n\n  getEdgeAnimationStyle() {\n    const style = super.getEdgeAnimationStyle();\n    return changeAnimationStyle(style);\n  }\n}\n\nexport const customLine = {\n  type: 'custom-line-edge',\n  view: LineEdge,\n  model: CustomLineModel,\n}\n\nexport const customPolyline = {\n  type: 'custom-polyline-edge',\n  view: PolylineEdge,\n  model: CustomPolylineModel,\n}\n\nexport const customBezier = {\n  type: 'custom-bezier-edge',\n  view: BezierEdge,\n  model: CustomBezierModel,\n}"},"index.html":{"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"//unpkg.com/@logicflow/core/dist/style/index.css\" />\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    #container {\n      height: calc(100% - 20px);\n      width: 100%;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <div class=\"custom-node-style\">\n    <div class=\"custom-node-fill\">\n      边类型：\n      <input type=\"radio\" name=\"type\" value=\"custom-line-edge\" oninput=\"handleTypeChange(this)\">直线\n      <input type=\"radio\" name=\"type\" value=\"custom-polyline-edge\" checked=\"checked\" oninput=\"handleTypeChange(this)\">直角折线\n      <input type=\"radio\" name=\"type\" value=\"custom-bezier-edge\" oninput=\"handleTypeChange(this)\">贝塞尔曲线\n    </div>\n    <div class=\"custom-node-fill\">\n      是否开启边动画\n      <input type=\"radio\" name=\"animation\" value=\"open\" oninput=\"handleAnimationChange(this)\">开启\n      <input type=\"radio\" name=\"animation\" value=\"close\" checked=\"checked\" oninput=\"handleAnimationChange(this)\">关闭\n    </div>\n    <div class=\"custom-node-fill\">\n      边颜色：\n      <div class=\"custom-red\" onclick=\"handleColorChange('stroke', 'red')\"></div>\n      <div class=\"custom-blue\" onclick=\"handleColorChange('stroke', 'blue')\"></div>\n      <div class=\"custom-green\" onclick=\"handleColorChange('stroke', 'green')\"></div>\n    </div>\n    <div class=\"custom-node-stroke\">\n      边宽度：\n      <input type=\"text\" oninput=\"handleStrokeWidth(this)\">\n    </div>\n    <div class=\"custom-text-color\">\n      线文本颜色：\n      <div class=\"custom-red\" onclick=\"handleColorChange('text', 'red')\"></div>\n      <div class=\"custom-blue\" onclick=\"handleColorChange('text', 'blue')\"></div>\n      <div class=\"custom-green\" onclick=\"handleColorChange('text', 'green')\"></div>\n    </div>\n    <div class=\"custom-text-size\">\n      线文本字体大小：<input type=\"text\" oninput=\"handleFontSize(this)\">\n    </div>\n    <div class=\"custom-text-position\">\n      线文本位置（基于默认位置平移）：<br>\n      水平：<input type=\"text\" oninput=\"handleHorizontalMove(this)\">\n      垂直：<input type=\"text\" oninput=\"handleVerticalMove(this)\">\n    </div>\n  </div>\n  <script src=\"//unpkg.com/@logicflow/core/dist/logic-flow.js\"></script>\n  <script type=\"module\" src=\"./index.js\"></script>\n</body>\n</html>"},"index.js":{"content":"import { customLine, customPolyline, customBezier } from \"./customEdge.js\";\n\n// logicflow流程图配置\nconst LFConfig = {\n  edgeTextDraggable: true,\n  adjustEdgeMiddle: true,\n  hoverOutline: false,\n  nodeSelectedOutline: false,\n  hideAnchors: true,\n  background: {\n    backgroundImage:\n            \"url('https://dpubstatic.udache.com/static/dpubimg/805efa14-d908-4332-a7a2-bee8fbb903e3.jpg')\",\n    backgroundRepeat: 'repeat',\n  },\n  grid: {\n    size: 1,\n    visible: false,\n  },\n  keyboard: {\n    enabled: true,\n  },\n};\nconst container = document.querySelector('#container');\n\nconst lf = new LogicFlow({\n  ...LFConfig,\n  // 容器\n  container,\n  // 指定画布区域的宽高，默认使用容器宽高\n  width: 1000,\n  height: 1000,\n});\n\nlf.register(customLine);\nlf.register(customPolyline);\nlf.register(customBezier);\n\nconst nodeData = [\n  {\n    id: \"node_id_1\",\n    type: \"circle\",\n    x: 100,\n    y: 100,\n    text: { x: 100, y: 100, value: \"节点1\" }\n  },\n  {\n    id: \"node_id_2\",\n    type: \"circle\",\n    x: 200,\n    y: 300,\n    text: { x: 200, y: 300, value: \"节点2\" },\n    properties: {}\n  }\n];\n\nconst edgeData = [\n  {\n    id: \"edge_id\",\n    type: \"custom-polyline-edge\",\n    sourceNodeId: \"node_id_1\",\n    targetNodeId: \"node_id_2\",\n    text: { x: 139, y: 200, value: \"连线\" },\n    startPoint: { x: 100, y: 140 },\n    endPoint: { x: 200, y: 250 },\n    pointsList: [\n      { x: 100, y: 140 },\n      { x: 100, y: 200 },\n      { x: 200, y: 200 },\n      { x: 200, y: 250 }\n    ],\n    properties: {}\n  }\n];\n\nconst render = (nodes, edges) => {\n  lf.render({\n    nodes,\n    edges,\n  });\n}\nrender(nodeData, edgeData);\n\nwindow.handleColorChange = (type, color) => {\n  switch (type) {\n    case 'stroke':\n      edgeData[0].properties = {\n        ...edgeData[0].properties,\n        strokeColor: color,\n      };\n      break;\n    case 'text':\n      edgeData[0].properties = {\n        ...edgeData[0].properties,\n        textColor: color,\n      };\n      break;\n    default:\n      break;\n  }\n  render(nodeData, edgeData);\n}\n\nwindow.handleStrokeWidth = (el) => {\n  edgeData[0].properties = {\n    ...edgeData[0].properties,\n    strokeWidth: Number(el.value),\n  };\n  render(nodeData, edgeData);\n}\n\nwindow.handleFontSize = (el) => {\n  edgeData[0].properties = {\n    ...edgeData[0].properties,\n    fontSize: Number(el.value),\n  };\n  render(nodeData, edgeData);\n}\n\nwindow.handleHorizontalMove = (el) => {\n  edgeData[0].properties = {\n    ...edgeData[0].properties,\n    textHorizontalMove: Number(el.value),\n  };\n  render(nodeData, edgeData);\n}\n\nwindow.handleVerticalMove = (el) => {\n  edgeData[0].properties = {\n    ...edgeData[0].properties,\n    textVerticalMove: Number(el.value),\n  };\n  render(nodeData, edgeData);\n}\n\nwindow.handleTypeChange = (el) => {\n  edgeData[0].type = el.value;\n  render(nodeData, edgeData);\n}\n\nwindow.handleAnimationChange = (el) => {\n  const isOpenAnimation = el.value === 'open';\n  edgeData[0].properties = {\n    ...edgeData[0].properties,\n    isAnimation: isOpenAnimation,\n  };\n  render(nodeData, edgeData);\n}"},"style.css":{"content":".custom-node-style {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 300px;\n  font-size: 14px;\n  margin: 20px;\n}\n\n.custom-node-style > div {\n  margin-bottom: 10px;\n}\n\n.custom-text-color,\n.custom-node-stroke,\n.custom-node-fill {\n  display: flex;\n}\n\n.custom-red {\n  width: 30px;\n  background-color: red;\n  cursor: pointer;\n  margin: 0 10px;\n}\n\n.custom-blue {\n  width: 30px;\n  background-color: blue;\n  cursor: pointer;\n  margin: 0 10px;\n}\n\n.custom-green {\n  width: 30px;\n  background-color: green;\n  cursor: pointer;\n  margin: 0 10px;\n}\n\ninput {\n  width: 70px;\n}"}}}